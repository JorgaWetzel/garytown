
#https://support.microsoft.com/en-us/topic/kb5025885-how-to-manage-the-windows-boot-manager-revocations-for-secure-boot-changes-associated-with-cve-2023-24932-41a975df-beb2-40c1-99a3-b3ff139f832d#bkmk_update_boot_media





#region Check for Updated Cert Definition in Secure Boot DB in loop until returns true for times out at 5 minutes
Function Test-Updated2023CertDefinitionSecureBootDB {
    #Step 1 Results Confirmation - Applying the DB update
    [System.Text.Encoding]::ASCII.GetString((Get-SecureBootUEFI db).bytes) -match 'Windows UEFI CA 2023'
}
$StopClock = 0
$WaitSecondsTotal = 300
$WaitSecondsPerLoop = 5
do {
    $Step1 = Test-Updated2023CertDefinitionSecureBootDB
    Start-Sleep -Seconds $WaitSecondsPerLoop
    $StopClock += $WaitSecondsPerLoop
} until (($Step1 -eq $true) -or ($StopClock -ge $WaitSecondsTotal))
if (Test-Updated2023CertDefinitionSecureBootDB){
    Write-Output "SUCCESS: Applying the DB update |  1036 | The PCA2023 certificate was added to the DB."
}
else{
    Write-Output "Not Complete: Applying the DB update |  1036 | The PCA2023 certificate was added to the DB."
}
#endregion Check for Updated Cert Definition in Secure Boot DB in loop until returns true for times out at 5 minutes

#region Check for Updated Boot Manager in loop until returns true for times out at 5 minutes
Function Test-UpdatedBootManager {   
    #Step 2 Results Confirmation - Updating the boot manager
    #Check Signing Cert on bootmgfw file
    $Volume = Get-Volume | Where-Object {$_.FileSystemType -eq "FAT32" -and $_.DriveType -eq "Fixed"}
    $SystemDisk = Get-Disk | Where-Object {$_.IsSystem -eq $true}
    $SystemPartition = Get-Partition -DiskNumber $SystemDisk.DiskNumber | Where-Object {$_.IsSystem -eq $true}  
    $SystemVolume = $Volume | Where-Object {$_.UniqueId -match $SystemPartition.Guid}
    $FilePath = "$($SystemVolume.Path)\EFI\Microsoft\Boot\bootmgfw.efi"
    $CertCollection = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2Collection
    $CertCollection.Import($FilePath, $null, 'DefaultKeySet')
    If ($CertCollection.Subject -like "*Windows UEFI CA 2023*") {
        return $true
        }
    else{
        return $false
    }
}
$StopClock = 0
$WaitSecondsTotal = 300
$WaitSecondsPerLoop = 5
do {
    $Step2 = Test-UpdatedBootManager
    Start-Sleep -Seconds $WaitSecondsPerLoop
    $StopClock += $WaitSecondsPerLoop
} until (($Step2 -eq $true) -or ($StopClock -ge $WaitSecondsTotal))
if (Test-UpdatedBootManager){
    Write-Output "SUCCESS: Updating the boot manager |  1799 | The PCA2023 signed boot manager was applied."
}
else{
    Write-Output "Not Complete: Updating the boot manager |  1799 | The PCA2023 signed boot manager was applied."
}
#endregion Check for Updated Boot Manager in loop until returns true for times out at 5 minutes


#region Check for Updated Revocation DB in loop until returns true for times out at 5 minutes
Function Test-RevocationOf2011CertSecureBootDB {    
    #Step 3 Results Confirmation - Applying the DBX update
    [System.Text.Encoding]::ASCII.GetString((Get-SecureBootUEFI dbx).bytes) -match 'Microsoft Windows Production PCA 2011'
}
$StopClock = 0
$WaitSecondsTotal = 300
$WaitSecondsPerLoop = 5
do {
    $Step3 = Test-RevocationOf2011CertSecureBootDB
    Start-Sleep -Seconds $WaitSecondsPerLoop
    $StopClock += $WaitSecondsPerLoop
} until (($Step3 -eq $true) -or ($StopClock -ge $WaitSecondsTotal))

if (Test-RevocationOf2011CertSecureBootDB){
    Write-Output "SUCCESS: Applying the DBX update |  1037 | The DBX update that untrusts the PCA2011 signing certificate was applied."
}
else{
    Write-Output "Not Complete: Applying the DBX update |  1037 | The DBX update that untrusts the PCA2011 signing certificate was applied."
}

#endregion Check for Updated Revocation DB in loop until returns true for times out at 5 minutes
